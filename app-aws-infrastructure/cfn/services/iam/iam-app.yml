AWSTemplateFormatVersion: 2010-09-09
Description: "cfn iam template"
Parameters:
  project:
    Type: String
    Description: Name of the project
  app:
    Type: String
    Default: app
    Description: Name of the app
  awsEnv:
    Type: String
    Default: dev
    AllowedValues: [poc, dev, qa, uat, uat-dr, prod, prod-dr,stag01,stag,test,stage,dr]
  codePipelineS3BucketArn:  
    Type: String
    Description: 'ARN of the AWS S3 Bucket for CodeBuild access'

Resources:
  # CodeBuild Service Role
  codebuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies: 
      - PolicyName: !Sub '${project}-${app}-${awsEnv}-codeBuild-Policy'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            -  # Allow codebuild to write to cloudwatch
              Sid: CloudWatchLogsPermissionsForAllCodeBuildProjects
              Effect: Allow
              Action:
                - logs:*
              Resource:
                - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
                - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*
            -  # Allow codebuild to list and get objects from any specific bucket
              Sid: S3BucketPolicy
              Effect: Allow
              Action:
                - s3:GetBucket*
                - s3:ListBucket*
              Resource: 
                - !Ref codePipelineS3BucketArn
            -  # Allow codebuild to get objects from codepipeline service buckets
              Sid: S3ObjectPolicy
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:GetObjectVersion
              Resource: 
                - !Sub '${codePipelineS3BucketArn}/*' 
            -  # Allow codebuild Actions
              Sid: CodeBuildPolicy
              Effect: Allow
              Action:
                - codebuild:CreateReportGroup
                - codebuild:CreateReport
                - codebuild:UpdateReport
                - codebuild:BatchPutTestCases
                - codebuild:BatchPutCodeCoverages
              Resource: '*' 
            -  # Allow codebuild to access Secrets.
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:your-secret-name
      RoleName: !Sub '${project}-${app}-${awsEnv}-codeBuildRole'
  codeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Policies:
        -
          PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:CreateTags
                  - iam:PassRole
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
  bastionHostRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: BastionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # EC2 permissions to describe and potentially start/stop instances
              - Effect: Allow
                Action: 
                  - ec2:DescribeInstances
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: '*'
              # CloudWatch Logs
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  # CodePipeline Service Role
  codePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies: 
      - PolicyName: !Sub '${project}-${app}-${awsEnv}-codeBuild-Policy'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            -  # Allow codepipeline to perform codebuild actions on specific project
              Sid: codeBuildPolicy
              Effect: Allow
              Action:
                - codebuild:StartBuild
                - codebuild:StopBuild
                - codebuild:StartBuildBatch
                - codebuild:StopBuildBatch
                - codebuild:RetryBuild
                - codebuild:RetryBuildBatch
                - codebuild:BatchGet*
                - codebuild:GetResourcePolicy
                - codebuild:DescribeTestCases
                - codebuild:DescribeCodeCoverages
                - codebuild:List*
              Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${project}-app-${awsEnv}-cb-*'
            -  # Allow codepipeline to use codestar connection
              Sid: codeStarPolicy
              Effect: Allow
              Action:
                - codestar-connections:UseConnection
              Resource:
                - arn:aws:codestar-connections:us-east-1:158730516251:connection/d0482a99-f20e-4278-9a63-22f52aa549b8
      RoleName: !Sub "${project}-${app}-${awsEnv}-codePipelineServiceRole-${AWS::Region}"
      Tags:
        - Key: "project"
          Value: !Ref project
        - Key: "env"
          Value: !Ref awsEnv
  s3InlinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject*
              - s3:PutObject
              - s3:PutObjectAcl
              - codecommit:ListBranches
              - codecommit:ListRepositories
            Resource: '*'
      PolicyName: !Sub "${project}-${app}-${awsEnv}-policy-codePipelineS3Access-${AWS::Region}"
      Roles: 
        - !Ref codePipelineRole

  webAppRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: WebAppPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # EC2 permissions for instances
              - Effect: Allow
                Action: 
                  - ec2:Describe*
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: '*'
              # Permissions related to CodePipeline, CodeBuild, and CodeDeploy
              - Effect: Allow
                Action:
                  - codepipeline:*
                  - codebuild:*
                  - codedeploy:*
                Resource: '*'
              # ELB Permissions
              - Effect: Allow
                Action: 
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:AttachInstancesToLoadBalancer
                  - elasticloadbalancing:DetachInstancesFromLoadBalancer
                Resource: '*'
              # CloudWatch Permissions
              - Effect: Allow
                Action: 
                  - cloudwatch:Describe*
                  - cloudwatch:PutMetricData
                Resource: '*'
              # SNS Permissions
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                Resource: '*'
              # Secrets Manager Permissions
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
              - Effect: Allow
                Action:
                  - rds:Describe*
                Resource: '*'

   # RDS Enhanced Monitoring Role
  iamRoleRDSEnhancedMonitoring:
    Type: AWS::IAM::Role
    Properties: 
      Description: !Sub "${project} ${awsEnv} env RDS Enhanced Monitoring Role"
      RoleName: !Sub "${project}-${app}-${awsEnv}-role-rdsEnhancedMonitoring-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
      Tags: 
        - Key: Name
          Value: !Sub "${project}-${app}-${awsEnv}-rdsEnhancedMonitoring-${AWS::Region}"
        - Key: project
          Value: !Ref project
        - Key: awsEnv
          Value: !Ref awsEnv
  
Outputs:
  codeDeployRole:
    Description: codeDeploy role name.
    Value: !Ref codeDeployRole
    Export:
      Name: !Sub '${project}-${app}-${awsEnv}-codeDeployRole-${AWS::Region}'
  codebuildExecutionRole:
    Description: CodeBuild role name.
    Value: !Ref codebuildExecutionRole
    Export:
      Name: !Sub '${project}-${app}-${awsEnv}-codebuildExecutionRole-${AWS::Region}'
  codebuildExecutionRoleArn:
    Description: CodeBuild role arn.
    Value: !GetAtt codebuildExecutionRole.Arn
    Export:
      Name: !Sub '${project}-${app}-${awsEnv}-codebuildExecutionRoleArn-${AWS::Region}'
  codePipelineRole:
    Description: CodePipeline role name.
    Value: !Ref codePipelineRole
    Export:
      Name: !Sub '${project}-${app}-${awsEnv}-codePipelineRole-${AWS::Region}'
  codePipelineRoleArn:
    Description: CodePipeline role arn.
    Value: !GetAtt codePipelineRole.Arn
    Export:
      Name: !Sub '${project}-${app}-${awsEnv}-codePipelineRoleArn-${AWS::Region}'
  chatbotRoleArn:
    Description: Chatbot channel role arn.
    Value: !GetAtt chatbotRole.Arn
    Export:
      Name: !Sub '${project}-${app}-${awsEnv}-chatbotChannelRoleArn-${AWS::Region}'
  iamRoleRDSEnhancedMonitoring:
    Value: !GetAtt iamRoleRDSEnhancedMonitoring.Arn
    Export:
      Name: !Sub "${project}-${app}-${awsEnv}-rdsEnhancedMonitoringARN-${AWS::Region}"
  webAppRole:
    Value: !GetAtt webAppRole.Arn
    Export:
      Name: !Sub "${project}-${app}-${awsEnv}-WebAppRole-${AWS::Region}"
  bastionHostRole:
    Value: !GetAtt bastionHostRole.Arn
    Export:
      Name: !Sub "${project}-${app}-${awsEnv}-bastionHostRole-${AWS::Region}"


      
