AWSTemplateFormatVersion: 2010-09-09
Description: "cfn for Codedeploy"

Parameters:
  project:
    Type: String
    MinLength: '3'
    MaxLength: '10'
    Description: Enter the Project Name.
  app:
    Type: String
    MinLength: '3'
    MaxLength: '15'
    Description: Enter the Application.
  env:
    Type: String
    AllowedValues: [dev, dev01, int, int01, uat, uat01, prd, prd01,stage,prod,dr]
    Description: Enter the Environment.
  codeDeployApplicationName:
    Type: String
    Description: Enter the codeDeploy Application Name
  iamServiceRoleArn:
    Type: String
    Description: codeDeploy role ARN.
  DeploymentConfigName:
    Type: String
    Description: Enter the Deployment Config Name
  AutoScalingGroupDesiredCapacity:
    Type: String
  AutoScalingGroupMinSize:
    Type: String
  AutoScalingGroupMaxSize:
    Type: String
  ImageId:
    Type: String
  InstanceType:
    Type: String
  WebappSecurityGroup:
    Type: String
  subnet1Id:
    Type: String
  subnet2Id:
    Type: String
  VPC:
    Type: String
  ALBSecurityGroup:
    Type: String
Resources: 
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGateway
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: subnet1Id 
        - Ref: subnet2Id 
      SecurityGroups:
        - Ref: ALBSecurityGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckPath: "/"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      HealthCheckPath: "/"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
  WebappLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Ref: ImageId
      InstanceType: 
        Ref: InstanceType
      SecurityGroups:
        - Ref: WebappSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
              #!/bin/bash

              yum  install -y java-1.8.0-openjdk-devel wget
              java -version
              cd /usr/local
              wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip
              wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip.asc
              wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip.sha512

              # verify hash / are these two outputs the same
              cat apache-tomcat-9.0.43.zip.sha512
              sha512sum apache-tomcat-9.0.43.zip

              gpg --keyserver pgpkeys.mit.edu --recv-key A9C5DF4D22E99998D9875A5110C01C5A2F6059E7
              gpg --verify apache-tomcat-9.0.43.zip.asc apache-tomcat-9.0.43.zip

              # if hash and signature are ok:
              unzip apache-tomcat-9.0.43.zip
              mv apache-tomcat-9.0.43 tomcat9
              echo 'JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true "' > /usr/local/tomcat9/bin/setenv.sh
              ls -la tomcat9/
              useradd -r tomcat
              chown -R tomcat:tomcat /usr/local/tomcat9
              ls -l /usr/local/tomcat9

              echo "[Unit]
              Description=Apache Tomcat Server
              After=syslog.target network.target

              [Service]
              Type=forking
              User=tomcat
              Group=tomcat

              Environment=CATALINA_PID=/usr/local/tomcat9/temp/tomcat.pid
              Environment=CATALINA_HOME=/usr/local/tomcat9
              Environment=CATALINA_BASE=/usr/local/tomcat9

              ExecStart=/usr/local/tomcat9/bin/catalina.sh start
              ExecStop=/usr/local/tomcat9/bin/catalina.sh stop

              RestartSec=10
              Restart=always
              [Install]
              WantedBy=multi-user.target" > /etc/systemd/system/tomcat.service

              # firewall-cmd --zone=public --permanent --add-port=8080/tcp
              # firewall-cmd --zone=public --permanent --add-port=8443/tcp
              # firewall-cmd --reload
              cd /usr/local/tomcat9/bin && chmod +x catalina.sh
              systemctl daemon-reload
              systemctl start tomcat.service
              systemctl enable tomcat.service
              systemctl status tomcat.service
              yum install ruby -y
              wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
              chmod +x ./install
              ./install auto
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      DesiredCapacity: !Ref AutoScalingGroupDesiredCapacity
      MinSize: !Ref AutoScalingGroupMinSize
      MaxSize: !Ref AutoScalingGroupMaxSize
      LaunchConfigurationName:
        Ref: WebappLaunchConfig
      VPCZoneIdentifier:
        - Ref: subnet1Id 
        - Ref: subnet2Id 
      TargetGroupARNs:
        - Ref: ALBTargetGroup
      Tags:
        - Key: Name
          Value: webapp-example
          PropagateAtLaunch: true
  WebAppScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 50
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
  codeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref codeDeployApplicationName
  codeDeploypDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref codeDeployApplication
      ServiceRoleArn: !Ref iamServiceRoleArn
      DeploymentConfigName: !Ref DeploymentConfigName
      DeploymentGroupName: CodeDeployGroupName
      AutoRollbackConfiguration:
          Enabled: true
          Events:
            - DEPLOYMENT_FAILURE
            - DEPLOYMENT_STOP_ON_REQUEST
      AutoScalingGroups:
      - Ref: AutoScalingGroup

Outputs: 
  applicationName:  
    Description: Application Name.
    Value: !Ref codeDeployApplication
    Export:
      Name: !Sub '${project}-${app}-${env}-codeDeployApplication-${AWS::Region}'
  deploymentGroupName:  
    Description: deployment Group Name.
    Value: !Ref deploymentGroupName
    Export:
      Name: !Sub '${project}-${app}-${env}-deploymentGroupName-${AWS::Region}'
  LoadBalancerName:  
    Description: deployment Group Name.
    Value: !Ref !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub '${project}-${app}-${env}-deploymentGroupName-${AWS::Region}'