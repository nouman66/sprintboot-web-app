AWSTemplateFormatVersion: 2010-09-09
Description: "cfn vpc template"
Parameters:
  awsEnv:
    Type: String
    Default: dev
    AllowedValues: [poc, dev, qa, test, uat, uat-dr, prod, prod-dr,test,stage,dr]
  project:
    Type: String
    Description: Name of the project
  app:
    Type: String
    Default: app
    Description: Name of the app
  vpcCidr:
    Type: String
    Description: cidr block for the vpc
  vpcDnsEnabled:
    Type: String
    Default: "true"
    AllowedValues: [true, false]
  vpcDnsSupport:
    Type: String
    Default: "true"
    AllowedValues: [true, false]   
  isPublicIPActive:
    Type: String
    Default: yes
    AllowedValues: [yes, no]
  vpcLogsRetention:
    Type: Number
    Default: 7
  subnetPublic1:
    Type: String
    Default: ""
  subnetPublic2:
    Type: String
    Default: ""
  subnetProtect1:
    Type: String
    Default: ""
  subnetProtect2:
    Type: String
    Default: ""
  subnetShield1:
    Type: String
    Default: ""
  subnetShield2:
    Type: String
    Default: ""
Conditions:
  isPublicIP: !Equals [!Ref isPublicIPActive, true]
  isAZ1: !Not [!Equals [!Ref subnetPublic1, "" ]]
  isAZ2: !Not [!Equals [!Ref subnetPublic2, "" ]]
Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCidr
      EnableDnsHostnames: !Ref vpcDnsEnabled
      EnableDnsSupport: !Ref vpcDnsSupport
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub "${project}-${app}-${awsEnv}-${AWS::Region}-${vpcCidr}"
  vpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${project}-igw-${awsEnv}-${app}-${AWS::Region}-${AWS::AccountId}"
  vpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: [vpc, vpcInternetGateway]
    Properties:
      VpcId: !Ref vpc 
      InternetGatewayId: !Ref vpcInternetGateway
  vpcLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/vpc/${project}-logs-${awsEnv}-${app}-${AWS::Region}"
      RetentionInDays: !Ref vpcLogsRetention
  vpcFlowlog:
    Type: AWS::EC2::FlowLog
    DependsOn : [vpc, vpcLogGroup]
    Properties:
      DeliverLogsPermissionArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/vpcflowlog-service-role-${awsEnv}-${app}"
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref vpcLogGroup
      ResourceType: VPC
      ResourceId: !Ref vpc
      TrafficType: ALL
  # public subnets 
  subnetPublic01:
    Condition: isAZ1
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref subnetPublic1
      MapPublicIpOnLaunch: !Ref isPublicIPActive
      VpcId: !Ref vpc

  subnetPublic02: 
    Condition: isAZ2
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref subnetPublic2
      MapPublicIpOnLaunch: !Ref isPublicIPActive
      VpcId: !Ref vpc

  # protect subnets 
  subnetProtect01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref subnetProtect1
      VpcId: !Ref vpc

  subnetProtect02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref subnetProtect2
      VpcId: !Ref vpc

  # Shield subnets 
  subnetShield01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref subnetShield1
      VpcId: !Ref vpc

  subnetShield02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref subnetShield2
      VpcId: !Ref vpc

 
# eips for nats
  eip01:
    Condition: isAZ1
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  eip02:
    Condition: isAZ2
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
 
# nat
  nat01:
    Condition: isAZ1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:  !GetAtt eip01.AllocationId
      SubnetId: !Ref subnetPublic01
      Tags:
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-nat01-${AWS::Region}"
  nat02:
    Condition: isAZ2
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:  !GetAtt eip02.AllocationId
      SubnetId: !Ref subnetPublic02
      Tags:
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-nat02-${AWS::Region}"
  

# public route tables
  rtbPublic01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub "${project}-${awsEnv}-${app}-rtb01-public-${AWS::Region}"
  rtbPublic01Route01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rtbPublic01
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref vpcInternetGateway
  rtbPublic01ToSubnet01:
    Condition: isAZ1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetPublic01
      RouteTableId: !Ref rtbPublic01
  rtbPublic01ToSubnet02:
    Condition: isAZ2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetPublic02
      RouteTableId: !Ref rtbPublic01

# protected route tables    
  rtbProtect01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub "${project}-${awsEnv}-${app}-rtb01-protect-${AWS::Region}"
  rtbProtect01Route01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rtbProtect01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat01
  rtbProtect01ToSubnet01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetProtect01
      RouteTableId: !Ref rtbProtect01

  rtbProtect02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub "${project}-${awsEnv}-${app}-rtb02-protect-${AWS::Region}"
  rtbProtect02Route01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rtbProtect02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [isAZ2, !Ref nat02, !Ref nat01] 
  rtbProtect02ToSubnet02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetProtect02
      RouteTableId: !Ref rtbProtect02
  
  # Shielded route tables    
  rtbShield01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub "${project}-${awsEnv}-${app}-rtb01-shield-${AWS::Region}"
  rtbShield01Route01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rtbShield01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref nat01
  rtbShield01ToSubnet01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetShield01
      RouteTableId: !Ref rtbShield01

  rtbShield02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub "${project}-${awsEnv}-${app}-rtb02-shield-${AWS::Region}"
  rtbShield02Route01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rtbShield02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [isAZ2, !Ref nat02, !Ref nat01]
  rtbShield02ToSubnet02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetShield02
      RouteTableId: !Ref rtbShield02

  
#public nacl
  naclPublic01:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-${app}-nacl-public01-${AWS::Region}"
      VpcId: !Ref vpc
  naclPublic01Ingress:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref naclPublic01
        RuleNumber: 100
        Protocol: -1 #6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0

  naclPublic01Egress:
    Condition: isAZ1
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref naclPublic01
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  naclPublic01Association:
    Condition: isAZ1
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref subnetPublic01
       NetworkAclId: !Ref naclPublic01
  naclPublic02:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-${app}-nacl-public02-${AWS::Region}"
      VpcId: !Ref vpc
  naclPublic02Ingress:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref naclPublic02
        RuleNumber: 100
        Protocol: -1 #6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
  naclPublic02Egress:
    Condition: isAZ2
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref naclPublic02
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  naclPublic02Association:
    Condition: isAZ2
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref subnetPublic02
       NetworkAclId: !Ref naclPublic02

  #protected nacl
  naclProtected01:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-${app}-nacl-protect01-${AWS::Region}"
      VpcId: !Ref vpc
  naclProtected01Ingress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref naclProtected01
        RuleNumber: 100
        Protocol: -1 #6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
  naclProtected01Egress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref naclProtected01
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  naclProtected01Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref subnetProtect01
       NetworkAclId: !Ref naclProtected01

  naclProtected02:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-${app}-nacl-protect02-${AWS::Region}"
      VpcId: !Ref vpc
  naclProtected02Ingress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref naclProtected02
        RuleNumber: 100
        Protocol: -1 #6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
  naclProtected02Egress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref naclProtected02
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  naclProtected02Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref subnetProtect02
       NetworkAclId: !Ref naclProtected02
  
  #Shield nacl
  naclShield01:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-${app}-nacl-Shield01-${AWS::Region}"
      VpcId: !Ref vpc
  naclShield01PrivateIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref naclShield01
        RuleNumber: 100
        Protocol: -1 #6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
  naclShield01Egress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref naclShield01
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  naclShield01Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref subnetShield01
       NetworkAclId: !Ref naclShield01

  naclShield02:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub "${project}-${awsEnv}-${app}-nacl-Shield02-${AWS::Region}"
      VpcId: !Ref vpc
  naclShield02Ingress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
        NetworkAclId: !Ref naclShield02
        RuleNumber: 100
        Protocol: -1 #6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
  naclShield02Egress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref naclShield02
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  naclShield02Association:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
       SubnetId: !Ref subnetShield02
       NetworkAclId: !Ref naclShield02
Outputs:
 vpc:
   Value: !Ref vpc
   Export:
     Name: !Sub "vpcId-${project}-${awsEnv}-${app}-${AWS::Region}"
 vpcCidr:
   Value: !GetAtt vpc.CidrBlock
   Export:
     Name: !Sub "vpcCidr-${project}-${awsEnv}-${app}-${AWS::Region}"
 vpcInternetGateway:
   Value: !Ref vpcInternetGateway
   Export:
     Name: !Sub "vpcInternetGateway-${project}-${awsEnv}-${app}-${AWS::Region}"
 vpcLogGroup:
   Value: !Ref vpcLogGroup
   Export:
     Name: !Sub "vpcLogGroup-${project}-${awsEnv}-${app}-${AWS::Region}"
 vpcFlowlog:
   Value: !Ref vpcFlowlog
   Export:
     Name: !Sub "vpcFlowlog-${project}-${awsEnv}-${app}-${AWS::Region}"
# public subnet
 subnetPublic01: 
  Condition: isAZ1
  Value: !Sub ${subnetPublic01}
  Export: 
    Name: !Sub "subnetPublic01-${project}-${awsEnv}-${app}-${AWS::Region}"
 subnetPublic02: 
  Condition: isAZ2
  Value: !Sub ${subnetPublic02}
  Export: 
    Name: !Sub "subnetPublic02-${project}-${awsEnv}-${app}-${AWS::Region}"

# protect subnet
 subnetProtect01:
  Value: !Sub ${subnetProtect01}
  Export: 
    Name: !Sub "subnetProtect01-${project}-${awsEnv}-${app}-${AWS::Region}"
 subnetProtect02:
  Value: !Sub ${subnetProtect02}
  Export: 
    Name: !Sub "subnetProtect02-${project}-${awsEnv}-${app}-${AWS::Region}" 
  
# shield subnet
 subnetShield01:
  Value: !Sub ${subnetShield01}
  Export: 
    Name: !Sub "subnetShield01-${project}-${awsEnv}-${app}-${AWS::Region}"
 subnetShield02:
  Value: !Sub ${subnetShield02}
  Export: 
    Name: !Sub "subnetShield02-${project}-${awsEnv}-${app}-${AWS::Region}" 
 

# eip
 eip01:
  Condition: isAZ1
  Value: !Sub ${eip01}
  Export: 
    Name: !Sub "eip01-${project}-${awsEnv}-${app}-${AWS::Region}"
 eip02:
  Condition: isAZ2
  Value: !Sub ${eip02}
  Export: 
    Name: !Sub "eip02-${project}-${awsEnv}-${app}-${AWS::Region}"

# nats 
 nat01:
  Condition: isAZ1
  Value: !Sub ${nat01}
  Export: 
    Name: !Sub "nat01-${project}-${awsEnv}-${app}-${AWS::Region}"
 nat02:
  Condition: isAZ2
  Value: !Sub ${nat02}
  Export: 
    Name: !Sub "nat02-${project}-${awsEnv}-${app}-${AWS::Region}"
